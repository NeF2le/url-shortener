// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, pass
func (_m *AuthUseCase) Login(ctx context.Context, email string, pass string) (string, string, string, error) {
	ret := _m.Called(ctx, email, pass)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, string, error)); ok {
		return rf(ctx, email, pass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, pass)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, email, pass)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) string); ok {
		r2 = rf(ctx, email, pass)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, email, pass)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUseCase) Refresh(ctx context.Context, refreshToken string) (string, string, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: ctx, email, pass
func (_m *AuthUseCase) Register(ctx context.Context, email string, pass string) (string, error) {
	ret := _m.Called(ctx, email, pass)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, pass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, pass)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
